import numpy as np
import matplotlib.pyplot as plt
from comparing_epsilons import Bandit
from optimistic_initial_values import run_experiment as run_experiment_oiv
from ucb1 import run_experiment as run_experiment_ucb

class BayesianBandit:
    def __init__(self, m):
        self.m = m
        # Parameters for mu - prior is N(0,1)
        self.m0 = 0
        self.lambda0 = 1
        self.sum_x = 0
        self.tau =1

    def pull(self):
        return np.random.randn() + self.m

    def sample(self):
        return np.random.randn()/np.sqrt(self.lambda0) + self.m0

    def update(self, x):
        # We assume tau = 1
        self.lambda0 += 1
        self.sum_x += x
        self.m0 = self.tau*self.sum_x / self.lambda0


def run_experiments_decayng_epsilon(m1, m2, m3, N):
    bandits = [Bandit(m1), Bandit(m2), Bandit(m3)]
    data = np.empty(N)
    for i in range(N):
        p = np.random.random()
        if p < 1.0 / (i+1):
            j = np.random.choice(3)
        else:
            j = np.argmax([b.mean for b in bandits])
        x = bandits[j].pull()
        bandits[j].update(x)
        data[i] = x
    cumulative_average = np.cumsum(data) / (np.arange(N) + 1)
    plt.title("Epsilon greedy with decay epsilon")
    plt.plot(cumulative_average)
    plt.plot(np.ones(N) * m1)
    plt.plot(np.ones(N) * m2)
    plt.plot(np.ones(N) * m3)
    plt.xscale("log")
    plt.show()
    return cumulative_average


def run_experiment(m1, m2, m3, N):
    bandits = [BayesianBandit(m1), BayesianBandit(m2), BayesianBandit(m3)]
    data = np.empty(N)
    for i in range(N):
        # Optimistic initial values
        j = np.argmax([b.sample() for b in bandits])
        x = bandits[j].pull()
        bandits[j].update(x)
        data[i] = x
    cumulative_average = np.cumsum(data) / (np.arange(N) + 1)
    plt.title("Thompson sampling")
    plt.plot(cumulative_average)
    plt.plot(np.ones(N) * m1)
    plt.plot(np.ones(N) * m2)
    plt.plot(np.ones(N) * m3)
    plt.xscale("log")
    plt.show()
    return cumulative_average

if __name__ == "__main__":
    m_1 = 1.0
    m_2 = 2.0
    m_3 = 3.0
    N = 100000
    eps = run_experiments_decayng_epsilon(m_1, m_2, m_3, N)
    oiv = run_experiment_oiv(m_1, m_2, m_3, N)
    ucb = run_experiment_ucb(m_1, m_2, m_3, N)
    bayes = run_experiment(m_1, m_2, m_3, N)

    # Log scale plot
    plt.plot(np.ones(N) * m_1)
    plt.plot(np.ones(N) * m_2)
    plt.plot(np.ones(N) * m_3)
    plt.plot(eps, label="Epsilon-greedy with decaying epsilon")
    plt.plot(oiv, label="Optimistic initial values")
    plt.plot(ucb, label="UCB1")
    plt.plot(bayes, label="Bayesian sampling")
    plt.legend()
    plt.title("Log plot")
    plt.xscale("log")
    plt.show()